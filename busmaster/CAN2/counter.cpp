/* This file is generated by BUSMASTER */
/* VERSION [1.2] */
/* BUSMASTER VERSION [3.0.0] */
/* PROTOCOL [CAN] */

/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include <map>
typedef unsigned int ID;
/* End BUSMASTER include header */


/* Start BUSMASTER global variable */
using namespace std;

typedef struct _data_info {
	unsigned char data[64];
	unsigned char data_len;
	struct _data_info* next;
} data_info;
typedef struct {
	unsigned int size;
	data_info* data;
} data_array;
map<ID, data_array> m;
/* End BUSMASTER global variable */


/* Start BUSMASTER Function Prototype  */
GCC_EXTERN void GCC_EXPORT OnMsg_All(STCAN_MSG RxMsg);
/* End BUSMASTER Function Prototype  */

/* Start BUSMASTER Function Wrapper Prototype  */
/* End BUSMASTER Function Wrapper Prototype  */


/* Start BUSMASTER generated function - OnMsg_All */
void OnMsg_All(STCAN_MSG RxMsg)
{
	if (m.find(RxMsg.id) == m.end()) {
		Trace("%x is not found", RxMsg.id);
		data_array* d = (data_array*) malloc(sizeof(data_array));
		d->data = (data_info*) malloc(sizeof(data_info));
		memcpy(d->data->data, RxMsg.data, RxMsg.dlc);
		d->data->data_len = RxMsg.dlc;
		d->data->next = NULL;
		d->size = 1;
		m.insert(make_pair(RxMsg.id, *d));
	} else {
		data_array d = m[RxMsg.id];
		data_info* cur = (data_info*) malloc(sizeof(data_info));
		memcpy(cur->data, RxMsg.data, RxMsg.dlc);
		cur->data_len = RxMsg.dlc;
		cur->next = NULL;
		data_info* c = d.data;
		while (c->next != NULL) {
			c = c->next;
		}
		c->next = cur;
		d.size++;
		m[RxMsg.id] = d;
	}

	data_array d = m[RxMsg.id];
	data_info* cur = d.data;
	while (cur->next != NULL) {
		int j = 1;
		char* s = NULL;
		if (cur->data_len < 1) {
			goto next;
		}
		s = (char*) malloc(cur->data_len * 4);
		sprintf(s, "%02X", cur->data[0]);
		
		while (j < cur->data_len) {
			sprintf(s, "%s %02X", s, cur->data[j]);
			j++;
		}
		Trace("id: %X data: %s", RxMsg.id, s);
		free(s);
next:
		cur = cur->next;
	}
	
}/* End BUSMASTER generated function - OnMsg_All */
