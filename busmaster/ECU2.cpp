/* This file is generated by BUSMASTER */
/* VERSION [1.2] */
/* BUSMASTER VERSION [3.0.0] */
/* PROTOCOL [CAN] */

/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include "C:\MinGW\lib\gcc\mingw32\5.1.0\include\c++\debug\map.h"
/* End BUSMASTER include header */


/* Start BUSMASTER global variable */
std::map<unsigned int, unsigned long> time;
std::map<unsigned int, int> count;
/* End BUSMASTER global variable */


/* Start BUSMASTER Function Prototype  */
GCC_EXTERN void GCC_EXPORT OnMsg_All(STCAN_MSG RxMsg);
/* End BUSMASTER Function Prototype  */

/* Start BUSMASTER Function Wrapper Prototype  */
/* End BUSMASTER Function Wrapper Prototype  */


/* Start BUSMASTER generated function - OnMsg_All */
void OnMsg_All(STCAN_MSG RxMsg)
{
unsigned char size = RxMsg.dlc & 0x000000FF;
char data[26];
char s[4];
int i = 0;
memset(data, 0, 26);
while (i < size) {
  memset(s, 0, 4);
  sprintf(s, "%02X ", RxMsg.data[i]);
  strcat(data, s);
  i++;
}

Trace("time: %u id: 0x%x size: %d data: %s", RxMsg.timeStamp, RxMsg.id, size, data);

if (time.find(RxMsg.id) != time.end()) {
  int c = count[RxMsg.id];
  if (++c == 10) {
    long t = (RxMsg.timeStamp - time[RxMsg.id]) / 10;
    Trace("cycle time of messages of CAN ID %X is %u 100s of microseconds", RxMsg.id, t);
    count[RxMsg.id] = 0;
    time.insert(std::make_pair(RxMsg.id, RxMsg.timeStamp));
  } else {
    count[RxMsg.id] = c;
  }
} else {
  time.insert(std::make_pair(RxMsg.id, RxMsg.timeStamp));
}
}/* End BUSMASTER generated function - OnMsg_All */
